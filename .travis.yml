language: cpp
services:
  - docker
cache:
    directories:
    - /C/tools/msys64/mingw64
    - /C/tools/msys64/usr
matrix:
  include:
  - os: linux
    compiler: gcc
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=gcc
      TRAVIS_BUILD_SYSTEM=autotools
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
  - os: osx
    compiler: clang
    env: >-
      TRAVIS_OS_NAME=osx
      TRAVIS_COMPILER_NAME=clang
      TRAVIS_BUILD_SYSTEM=autotools
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
  - os: linux
    compiler: gcc
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=gcc
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
  - os: linux
    compiler: clang
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=clang
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
  - os: linux
    dist: bionic
    compiler: gcc
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=gcc
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
      HYPERROGUE_USE_ROGUEVIZ=1
  - os: linux
    compiler: clang
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=clang
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
      HYPERROGUE_USE_ROGUEVIZ=1
  - os: osx
    compiler: clang
    env: >-
      TRAVIS_OS_NAME=osx
      TRAVIS_COMPILER_NAME=clang
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
  - os: osx
    compiler: gcc
    env: >-
      TRAVIS_OS_NAME=osx
      TRAVIS_COMPILER_NAME=gcc
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
      HYPERROGUE_USE_ROGUEVIZ=1
  - os: osx
    compiler: clang
    env: >-
      TRAVIS_OS_NAME=osx
      TRAVIS_COMPILER_NAME=clang
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
      HYPERROGUE_USE_ROGUEVIZ=1
  - os: linux
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=emscripten
      TRAVIS_BUILD_SYSTEM=emscripten
  - os: osx
    compiler: clang
    env: >-
      TRAVIS_OS_NAME=osx
      TRAVIS_COMPILER_NAME=clang
      TRAVIS_BUILD_SYSTEM=mymake
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
  - os: osx
    compiler: clang
    env: >-
      TRAVIS_OS_NAME=osx
      TRAVIS_COMPILER_NAME=clang
      TRAVIS_BUILD_SYSTEM=mymake
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
      HYPERROGUE_USE_ROGUEVIZ=1
  - os: linux
    compiler: gcc
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=gcc
      TRAVIS_BUILD_SYSTEM=mymake
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
  - os: linux
    dist: bionic
    compiler: gcc
    env: >-
      TRAVIS_OS_NAME=linux
      TRAVIS_COMPILER_NAME=gcc
      TRAVIS_BUILD_SYSTEM=mymake
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
      HYPERROGUE_USE_ROGUEVIZ=1
  - os: windows
    compiler: gcc
    env: >-
      TRAVIS_OS_NAME=windows
      TRAVIS_COMPILER_NAME=gcc
      TRAVIS_BUILD_SYSTEM=Makefile
      HYPERROGUE_USE_GLEW=1
      HYPERROGUE_USE_PNG=1
      HYPERROGUE_USE_ROGUEVIZ=1

before_install:
- |-
  # Set up MinGW64 if needed
  if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
    choco uninstall -y mingw
    choco upgrade --no-progress -y msys2
    export MSYS2='cmd //C RefreshEnv.cmd '
    export MSYS2+='& set MSYS=winsymlinks:nativestrict '
    export MSYS2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
    export MINGW64="$MSYS2 -mingw64 -full-path -here -c "\"\$@"\" --"
    export MSYS2+=" -msys2 -c "\"\$@"\" --"
    $MSYS2 pacman -Sy --noconfirm --needed mingw-w64-x86_64-gcc make
    export PATH=/c/tools/msys64/mingw64/bin:$PATH
    setx -m PATH "C:\\tools\\msys64\\mingw64\\bin;%PATH%"
  fi
- |-
  # Install SDL
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    sudo apt-get update -qq
    sudo apt-get install -qq libsdl1.2-dev libsdl-gfx1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev
  elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    brew update
    brew install sdl sdl_gfx sdl_mixer sdl_ttf
    # work around https://stackoverflow.com/questions/51034399/ for now
    (cd /usr/local/include && ln -sf SDL/SDL.h)
  elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    $MSYS2 pacman -Sy --noconfirm --needed mingw-w64-x86_64-SDL mingw-w64-x86_64-SDL_gfx mingw-w64-x86_64-SDL_mixer mingw-w64-x86_64-SDL_ttf
    sed -i'.orig' 's/<SDL.h>/"SDL.h"/' /C/tools/msys64/mingw64/include/SDL/SDL_gfxPrimitives.h # otherwise header can't be located
  else
    exit 'Unsupported OS'
  fi
- |-
  # Install GLEW if asked for
  if [[ "$HYPERROGUE_USE_GLEW" == "1" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get install -qq libglew-dev
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install glew
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      $MSYS2 pacman -Sy --noconfirm --needed mingw-w64-x86_64-glew mingw-w64-x86_64-mesa
    else
      exit 'Unsupported OS'
    fi
  fi
- |-
  # Install libpng if asked for
  if [[ "$HYPERROGUE_USE_PNG" == "1" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      echo 'libpng is installed by default'
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install libpng
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      $MSYS2 pacman -Sy --noconfirm --needed mingw-w64-x86_64-libpng
    else
      exit 'Unsupported OS'
    fi
  fi
- |-
  # Install autotools if asked for
  if [[ "$TRAVIS_USE_AUTOTOOLS" == "1" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      echo 'autotools is installed by default'
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install automake
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      $MSYS2 pacman -Sy --noconfirm --needed automake-wrapper autoconf
    else
      exit 'Unsupported OS'
    fi
  fi
- |-
  # Prepare MinGW DLLs
  if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    cp /c/tools/msys64/mingw64/bin/*.dll .
  fi

script:
- |-
  # Build hyperrogue.
  if [[ "$TRAVIS_BUILD_SYSTEM" == "autotools" ]]; then
    autoreconf -vi
    ./configure CXXFLAGS="-W -Wall -Wextra -Werror -Wno-unused-parameter -Wno-maybe-uninitialized -Wno-unknown-warning-option"
    make
  elif [[ "$TRAVIS_BUILD_SYSTEM" == "Makefile" && "$TRAVIS_OS_NAME" == "windows" ]]; then
    $MINGW64 make -f Makefile.simple
  elif [[ "$TRAVIS_BUILD_SYSTEM" == "Makefile" ]]; then
    make -f Makefile.simple
  elif [[ "$TRAVIS_BUILD_SYSTEM" == "mymake" ]]; then
    make -f Makefile.simple mymake
    if [[ "$HYPERROGUE_USE_ROGUEVIZ" == "1" ]]; then
      ./mymake -rv
    else
      ./mymake
    fi
  elif [[ "$TRAVIS_BUILD_SYSTEM" == "emscripten" ]]; then
    docker run --rm -v $(pwd):/src trzeci/emscripten make -f Makefile.simple emscripten
  else
    exit 'Unsupported build system'
  fi
- |-
  # Test hyperrogue.
  if [[ "$TRAVIS_BUILD_SYSTEM" == "emscripten" ]]; then
    ls -lAF hyper.html hyper.js hyper.wasm
  elif [[ "$TRAVIS_BUILD_SYSTEM" == "mymake" ]]; then
    ./hyper --help
  else
    ./hyperrogue --help
  fi
- |-
  # Test "make dist". ("make distcheck" is expected to fail.)
  if [[ "$TRAVIS_BUILD_SYSTEM" == "autotools" ]]; then make dist; fi
- |-
  # Test "sudo make install".
  if [[ "$TRAVIS_BUILD_SYSTEM" == "autotools" ]]; then sudo make install; fi
